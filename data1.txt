package com.example.resttemplate.pool;
 
import org.springframework.boot.context.properties.ConfigurationProperties;
 
@ConfigurationProperties(prefix = "resttemplate.pool")
public class PooledRestTemplateProperties {
    private int maxTotal = 100; // 最大连接数
    private int defaultMaxPerRoute = 20; // 每个路由默认的最大连接数
    private int connectTimeout = 3000; // 连接超时时间(ms)
    private int connectionRequestTimeout = 500; // 从连接池获取连接的超时时间(ms)
    private int socketTimeout = 5000; // 读取超时时间(ms)
    private boolean evictIdleConnections = true; // 是否驱逐空闲连接
    private int evictIdleConnectionsTime = 30; // 空闲连接驱逐时间(s)
 
    // Getters and Setters
    public int getMaxTotal() {
        return maxTotal;
    }
 
    public void setMaxTotal(int maxTotal) {
        this.maxTotal = maxTotal;
    }
 
    public int getDefaultMaxPerRoute() {
        return defaultMaxPerRoute;
    }
 
    public void setDefaultMaxPerRoute(int defaultMaxPerRoute) {
        this.defaultMaxPerRoute = defaultMaxPerRoute;
    }
 
    public int getConnectTimeout() {
        return connectTimeout;
    }
 
    public void setConnectTimeout(int connectTimeout) {
        this.connectTimeout = connectTimeout;
    }
 
    public int getConnectionRequestTimeout() {
        return connectionRequestTimeout;
    }
 
    public void setConnectionRequestTimeout(int connectionRequestTimeout) {
        this.connectionRequestTimeout = connectionRequestTimeout;
    }
 
    public int getSocketTimeout() {
        return socketTimeout;
    }
 
    public void setSocketTimeout(int socketTimeout) {
        this.socketTimeout = socketTimeout;
    }
 
    public boolean isEvictIdleConnections() {
        return evictIdleConnections;
    }
 
    public void setEvictIdleConnections(boolean evictIdleConnections) {
        this.evictIdleConnections = evictIdleConnections;
    }
 
    public int getEvictIdleConnectionsTime() {
        return evictIdleConnectionsTime;
    }
 
    public void setEvictIdleConnectionsTime(int evictIdleConnectionsTime) {
        this.evictIdleConnectionsTime = evictIdleConnectionsTime;
    }
}

package com.example.resttemplate.pool;
 
import org.apache.hc.client5.http.classic.HttpClient;
import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;
import org.apache.hc.core5.util.Timeout;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
 
@Configuration
@ConditionalOnClass(RestTemplate.class)
@EnableConfigurationProperties(PooledRestTemplateProperties.class)
public class PooledRestTemplateAutoConfiguration {
 
    private final PooledRestTemplateProperties properties;
 
    public PooledRestTemplateAutoConfiguration(PooledRestTemplateProperties properties) {
        this.properties = properties;
    }
 
    @Bean
    @ConditionalOnMissingBean
    public PoolingHttpClientConnectionManager poolingHttpClientConnectionManager() {
        PoolingHttpClientConnectionManager connectionManager = PoolingHttpClientConnectionManagerBuilder.create()
                .setMaxConnTotal(properties.getMaxTotal())
                .setMaxConnPerRoute(properties.getDefaultMaxPerRoute())
                .build();
 
        if (properties.isEvictIdleConnections()) {
            // 定期关闭空闲连接
            connectionManager.closeIdle(Timeout.ofSeconds(properties.getEvictIdleConnectionsTime()));
        }
 
        return connectionManager;
    }
 
    @Bean
    @ConditionalOnMissingBean
    public HttpClient httpClient(PoolingHttpClientConnectionManager poolingHttpClientConnectionManager) {
        RequestConfig requestConfig = RequestConfig.custom()
                .setConnectTimeout(Timeout.ofMilliseconds(properties.getConnectTimeout()))
                .setConnectionRequestTimeout(Timeout.ofMilliseconds(properties.getConnectionRequestTimeout()))
                .setResponseTimeout(Timeout.ofMilliseconds(properties.getSocketTimeout()))
                .build();
 
        return HttpClientBuilder.create()
                .setConnectionManager(poolingHttpClientConnectionManager)
                .setDefaultRequestConfig(requestConfig)
                .build();
    }
 
    @Bean
    @ConditionalOnMissingBean
    public ClientHttpRequestFactory clientHttpRequestFactory(HttpClient httpClient) {
        return new HttpComponentsClientHttpRequestFactory(httpClient);
    }
 
    @Bean
    @ConditionalOnMissingBean
    public RestTemplate restTemplate(ClientHttpRequestFactory clientHttpRequestFactory) {
        return new RestTemplate(clientHttpRequestFactory);
    }
}
